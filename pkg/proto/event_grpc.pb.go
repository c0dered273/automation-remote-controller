// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: event.proto

package proto

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EventMultiService_EventStreaming_FullMethodName = "/proto.EventMultiService/EventStreaming"
)

// EventMultiServiceClient is the client API for EventMultiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventMultiServiceClient interface {
	EventStreaming(ctx context.Context, opts ...grpc.CallOption) (EventMultiService_EventStreamingClient, error)
}

type eventMultiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventMultiServiceClient(cc grpc.ClientConnInterface) EventMultiServiceClient {
	return &eventMultiServiceClient{cc}
}

func (c *eventMultiServiceClient) EventStreaming(ctx context.Context, opts ...grpc.CallOption) (EventMultiService_EventStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventMultiService_ServiceDesc.Streams[0], EventMultiService_EventStreaming_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &eventMultiServiceEventStreamingClient{stream}
	return x, nil
}

type EventMultiService_EventStreamingClient interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventMultiServiceEventStreamingClient struct {
	grpc.ClientStream
}

func (x *eventMultiServiceEventStreamingClient) Send(m *Event) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventMultiServiceEventStreamingClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventMultiServiceServer is the server API for EventMultiService service.
// All implementations must embed UnimplementedEventMultiServiceServer
// for forward compatibility
type EventMultiServiceServer interface {
	EventStreaming(EventMultiService_EventStreamingServer) error
	mustEmbedUnimplementedEventMultiServiceServer()
}

// UnimplementedEventMultiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventMultiServiceServer struct {
}

func (UnimplementedEventMultiServiceServer) EventStreaming(EventMultiService_EventStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStreaming not implemented")
}
func (UnimplementedEventMultiServiceServer) mustEmbedUnimplementedEventMultiServiceServer() {}

// UnsafeEventMultiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventMultiServiceServer will
// result in compilation errors.
type UnsafeEventMultiServiceServer interface {
	mustEmbedUnimplementedEventMultiServiceServer()
}

func RegisterEventMultiServiceServer(s grpc.ServiceRegistrar, srv EventMultiServiceServer) {
	s.RegisterService(&EventMultiService_ServiceDesc, srv)
}

func _EventMultiService_EventStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventMultiServiceServer).EventStreaming(&eventMultiServiceEventStreamingServer{stream})
}

type EventMultiService_EventStreamingServer interface {
	Send(*Event) error
	Recv() (*Event, error)
	grpc.ServerStream
}

type eventMultiServiceEventStreamingServer struct {
	grpc.ServerStream
}

func (x *eventMultiServiceEventStreamingServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventMultiServiceEventStreamingServer) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventMultiService_ServiceDesc is the grpc.ServiceDesc for EventMultiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventMultiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EventMultiService",
	HandlerType: (*EventMultiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStreaming",
			Handler:       _EventMultiService_EventStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "event.proto",
}
